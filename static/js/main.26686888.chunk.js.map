{"version":3,"sources":["ToDoCreateForm.js","ToDoListItem.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoCreateForm","props","useState","inputValue","setInputValue","className","value","onChange","e","target","style","margin","onClick","create","ToDoListItem","editMode","setIsEditMode","todo","onDone","onUndone","onDeleted","newToDoSave","isToDoDone","done","toDoText","title","toDoId","id","titleStyle","textDecoration","fontWeight","listStyleType","deleteIcon","width","height","viewBox","fill","xmlns","d","fillRule","editIcon","doneIcon","undoneIcon","newTodo","setNewTodo","placeholder","ToDoList","todos","map","el","index","key","initialList","App","setTodos","Date","toLocaleTimeString","toLocaleDateString","newItem","Math","random","updatedTodos","filter","updatedTitle","updatedTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.26686888.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nexport default function ToDoCreateForm(props) {\n\n    const [inputValue, setInputValue] = useState('');\n    const onCreate = () => {\n        props.create(inputValue);\n        setInputValue('');\n    }\n    const inputOnChange = e => setInputValue(e.target.value);\n\n    return (\n        <div className=\"app\">\n\n            <input value={inputValue}\n                   onChange={inputOnChange}/>\n            <button className=\"btn btn-secondary btn-sm\" style={{margin: \"8px\"}} onClick={onCreate}>Create</button>\n\n        </div>\n    );\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\n\n\nexport default function ToDoListItem(props) {\n\n    const [editMode, setIsEditMode] = useState(false)\n    const {todo, onDone, onUndone, onDeleted, newToDoSave} = props  // destructuring. To variable to do, we sent it over here\n\n\n    const isToDoDone = todo.done    // receiving 'to do 'status'\n    const toDoText = todo.title     // and 'title' from App.js\n    const toDoId = todo.id         // and 'status' from App.js\n\n\n    const titleStyle = isToDoDone === true ?\n        {textDecoration: \"line-through\", fontWeight: \"bold\", listStyleType: \"none\"} : // removes dot's in from of todos in browser\n        {listStyleType: \"none\"}\n\n    const deleteIcon = <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0\n                          0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n        <path fillRule=\"evenodd\"\n              d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1\n                         1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1\n                            1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n    </svg>\n\n    const editIcon = <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-pencil\" fill=\"currentColor\"\n                          xmlns=\"http://www.w3.org/2000/svg\">\n        <path fillRule=\"evenodd\"\n              d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"/>\n        <path fillRule=\"evenodd\"\n              d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"/>\n    </svg>\n    const doneIcon = <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-clipboard-check\"\n                          fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fillRule=\"evenodd\"\n              d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\"/>\n        <path fillRule=\"evenodd\"\n              d=\"M9.5 1h-3a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3zm4.354 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z\"/>\n    </svg>\n    const undoneIcon = <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-exclamation\"\n                            fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z\"/>\n    </svg>\n\n    const [newTodo, setNewTodo] = useState(toDoText)\n\n\n    const inputHandler = (e) => {\n        setNewTodo(e.target.value)\n    }\n\n    const saveButtonClick = () => {\n        newToDoSave(toDoId, newTodo)\n        setIsEditMode(false)\n    }\n\n    return (\n        <div>\n\n            {editMode ? (\n                <div>\n                    <li className=\"list-group-item\" style={titleStyle}>\n                        <input className=\"list-group-placeholder\"\n                               onChange={inputHandler}\n                               value={newTodo}        // otherwise it's going to give us old state\n                               placeholder={toDoText}/>\n                        <button className=\"btn btn-outline-success btn-sm float-right\"\n                                onClick={saveButtonClick}>Save\n                        </button>\n                    </li>\n                </div>\n            ) : (\n                <div>\n\n                    {isToDoDone ? (\n                        <li className=\"list-group-item\" style={titleStyle}>\n\n                            {toDoText}\n                            <button className=\"btn btn-outline-success btn-sm float-right\"\n                                    onClick={() => onDeleted(toDoId)}>{deleteIcon}\n                            </button>\n                            <button className=\"btn btn-outline-success btn-sm float-right\"\n                                    onClick={() => onUndone(toDoId)}>{doneIcon}\n                            </button>\n                            <button className=\"btn\"\n                                    onClick={() => setIsEditMode(true)}>{editIcon}\n                            </button>\n\n\n                        </li>\n                    ) : (\n                        <li className=\"list-group-item\" style={titleStyle}>\n                            {toDoText}\n                            <button className=\"btn btn-outline-success btn-sm float-right\"\n                                    onClick={() => onDeleted(toDoId)}>{deleteIcon}\n                            </button>\n                            <button className=\"btn btn-outline-warning btn-sm float-right\"\n                                    onClick={() => onDone(toDoId)}>{undoneIcon}\n                            </button>\n                            <button className=\"btn \"\n                                    onClick={() => setIsEditMode(true)}>{editIcon}\n                            </button>\n\n\n                        </li>\n                    )}\n                </div>\n            )}\n\n        </div>\n    );\n}\n\n\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport ToDoListItem from \"./ToDoListItem\";\n\n\nexport default function ToDoList(props) {\n\n    const {todos, onDone, onUndone, onDeleted, newToDoSave} = props\n\n    return (\n        <ul className=\"list-group todo-list\">\n\n            {todos.map((el, index) =>\n                <ToDoListItem\n                    key={el.id}\n                    todo={el}\n                    onDone={onDone}\n                    onUndone={onUndone}\n                    onDeleted={onDeleted}\n                    newToDoSave={newToDoSave}/>)}\n            {/*we went over all the elements with map, and sent it to ToDoListItem to be rendered */}\n\n        </ul>\n    );\n}\n\n\n\n","import React, {useState} from 'react';\nimport ToDoCreateForm from './ToDoCreateForm'\nimport ToDoList from \"./ToDoList\";\nimport './App.css';\n\nconst initialList = [\n    {\n        id: 1,\n        title: 'Become an amazing developer',\n        done: false\n    },\n    {\n        id: 2,\n        title: 'Make a dinner',\n        done: true\n    },\n    {\n        id: 3,\n        title: 'Drink water',\n        done: false\n    }]\n\n\nexport default function App() {\n\n    const [todos, setTodos] = useState(initialList)\n\n    const create = (title) => {\n        const newItem = {\n            id: Math.random() * 10,\n            title: title,\n            done: false\n        }\n        const updatedTodos = [...todos, newItem]\n        setTodos(updatedTodos)\n    }\n\n\n    const onDeleted = (id) => {\n        const updatedTodos = todos.filter(el => el.id !== id);\n        setTodos(updatedTodos)\n    }\n    const onDone = (id) => {\n        const updatedTodos = todos.map(el => { //going through each element of initial todos\n            if (el.id === id) return {...el, done: true}\n            else return el;\n\n        })\n        setTodos(updatedTodos)\n    }\n\n\n    const onUndone = (id) => {\n        const updatedTodos = todos.map(el => {\n            if (el.id === id) return {...el, done: false}\n            else return el;\n\n        })\n        setTodos(updatedTodos)\n    }\n\n    const newToDoSave = (id, updatedTitle) => {\n        const updatedTodo = [...todos].map(el => {\n            if (el.id === id)\n                return {...el, title: updatedTitle}\n            else return el\n        })\n        setTodos(updatedTodo);\n    }\n\n    // const moveupTodo = (index) => {\n    //     const moveUpTodo = [...todos]\n    //     const currentElem = moveUpTodo[index];\n    //     const previousElem = moveUpTodo[index - 1]\n    //     moveUpTodo[index] = previousElem\n    //     moveUpTodo[index - 1] = currentElem;\n    //     setTodos(moveUpTodo)\n    // }\n\n\n    return (\n        <div className=\"app\">\n            <h3>To do list</h3>\n            <span>{(new Date()).toLocaleTimeString()}</span>;\n            <span style={{margin: \"8px\"}}>{(new Date()).toLocaleDateString()}</span>;\n\n\n            <ToDoCreateForm create={create}/>\n\n            <ToDoList todos={todos}\n                      onDeleted={onDeleted}\n                      onDone={onDone}\n                      onUndone={onUndone}\n                      newToDoSave={newToDoSave}/>\n        </div>\n    );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}